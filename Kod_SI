#include "sumolib.h"

/**
 * Rozmieszczenie czujnikow
 * GRD1 - lewy przod
 * GRD2 - prawy przod
 * GRD3 - lewy tyl
 * GRD4 - prawy tyl
 * DIST1 - lewy przod
 * DIST2 - prawy przod
 * DIST3 - tyl, srodek
 * Rozmieszczenie napedow
 * MOTOR1 - lewy silnik
 * SERVO1 - lewe serwo
 * MOTOR2 - prawy silnik
 * SERVO2 - prawe serwo, pracujace odwrotnie
 * Znaczenie przyciskow, przelacznikow, diod
 * BUTTON1 - start
 * BUTTON2 - start
 * SWITCH1 - wybor predkosci
 * SWITCH2 - wybor strategii
 * LED1-4 - stan czujnikow GRD
 * LED5-7 - stan czujnikow DIST
 * LED8 - miga z okresem 1s
 * LED9-11 - odliczanie binarne i ruch robota
 * LED12 - aktywne USB
 */

// definicja progu widzenia czujnikow odleglosci
#define DIST_TRESHOLD 1600//600 //ok 15[cm]Ogarnonć to! jakie wartosci to jakie odległoci

// definicje nazwy czynnosci
#define STOP 0
#define FORWARD 1
#define FORWARD_LEFT 2
#define FORWARD_RIGHT 3
#define FORWARD_ATACK 4
#define BACKWARD 5
#define BACKWARD_LEFT 6
#define BACKWARD_RIGHT 7
#define BACKWARD_ATACK 8
#define ROTATE_LEFT 9
#define ROTATE_RIGHT 10

#define repetitionMaximum 20

// deklaracje funkcji
void timer1();
void countdown();
void executeAction();
void selectAction();
void firstMove();

// wartosc aktuanie wykonywanej czynnosci
volatile int currentAction = STOP;
volatile int suggestedAction = ROTATE_LEFT;
volatile int repetition = 10;

int main(void) {
	init();
	// dawanie znaku zycia
	rprintf("Reset\r\n");//czy to potrzebne?
	// uruchomienie timera
	timerSchedule(timer1, 1);//Ta funkcja przerzuca funkcje w argumencie na inny watek i wykonuje co podany czas - wykorzystac!

	// oczekiwanie na nacisniecie przycosku i odliczanie
	countdown();

	firstMove();
	executeAction();
	waitMs(20);
	// petla glowna programu
	for (;;) {
		// wybor akcji
		selectAction();
		// wykonywanie akcji
		executeAction();
		// opoznienie
		//if (switchIsOn(SWITCH2))
		waitMs(20);
		//else waitMs(50);
	}
}
/*
int main(void) {
	init();

	timerSchedule(selectAction(), 15);

	timerSchedule(executeAction(), 20);

	// oczekiwanie na nacisniecie przycosku i odliczanie
	countdown();
}*/

// Funkcja wyboru akcji
void firstMove()
{
	if(switchIsOn(SWITCH1))
	{
		if(switchIsOn(SWITCH2))
		{
			if(switchIsOn(SWITCH3))currentAction = FORWARD;
			else currentAction = FORWARD_LEFT;
		}
		else currentAction = BACKWARD_RIGHT;
	}
	else
	{
		if(switchIsOn(SWITCH2))currentAction = FORWARD_RIGHT;
		else if(switchIsOn(SWITCH3))currentAction = BACKWARD_LEFT;
		else currentAction = BACKWARD;
	}
}
void selectAction() {
	repetition++;
	if(!grdDetected(GRD1) || !grdDetected(GRD2) || !grdDetected(GRD3) || !grdDetected(GRD4))
	{
		repetition = 0;
		if (!grdDetected(GRD1) && !grdDetected(GRD2)){
			// jesli linia jest z przodu - ucieczka do tylu
			currentAction = BACKWARD;
			suggestedAction = BACKWARD;
		} else if (!grdDetected(GRD3) && !grdDetected(GRD4)){
			// jesli linia jest z tylu - ucieczka do przodu
			currentAction = FORWARD;
			suggestedAction = FORWARD;
		} else if (!grdDetected(GRD1)) {
			// jesli linia jest z przodu po lewej - ucieczka do tylu prawo
			if(currentAction == FORWARD_RIGHT)currentAction = BACKWARD;
			else currentAction = BACKWARD_RIGHT;
			suggestedAction = BACKWARD_RIGHT;
		} else if (!grdDetected(GRD2)) {
			// jesli linia jest z przodu po prawej - ucieczka do tylu lewo
			if(currentAction == FORWARD_LEFT)currentAction = BACKWARD;
			else currentAction = BACKWARD_LEFT;
			suggestedAction = BACKWARD_LEFT;
		} else if (!grdDetected(GRD3)) {
			// jesli linia jest z tylu po lewej - ucieczka do przodu prawo
			if(currentAction == FORWARD_RIGHT)currentAction = FORWARD;
			else currentAction = FORWARD_RIGHT;
			suggestedAction = FORWARD_RIGHT;
		} else if (!grdDetected(GRD4)) {
			// jesli linia jest z tylu po prawej - ucieczka do przodu lewo
			if(currentAction == FORWARD_LEFT)currentAction = FORWARD;
			else currentAction = FORWARD_LEFT;
			suggestedAction = FORWARD_LEFT;
		} else if (!grdDetected(GRD2) && (!grdDetected(GRD4))) {
			//jeżeli linia jest wykryta przez 2 czujniki z prawej
            currentAction = BACKWARD_LEFT;
            suggestedAction = BACKWARD_LEFT;
		} else if (!grdDetected(GRD1) && (!grdDetected(GRD3))) {
			//jeżeli linia jest wykryta przez 2 czujniki z lewej
            currentAction = BACKWARD_RIGHT;
            suggestedAction = BACKWARD_RIGHT;
		}
	}

	if (distValue(DIST1) > DIST_TRESHOLD || distValue(DIST2) > DIST_TRESHOLD /*|| distValue(DIST3) > DIST_TRESHOLD*/)
	{
		repetition = 0;
		if (distValue(DIST1) > DIST_TRESHOLD && distValue(DIST2) > DIST_TRESHOLD) {
			// jesi przeciwnik jest z przodu na wprost - atak
			currentAction = FORWARD_ATACK;
			//suggestedAction = BACKWARD_RIGHT;
		} else if (distValue(DIST1) > DIST_TRESHOLD) {
			// jesli przeciwnik jest z przodu po lewej - do przodu na lewo
			currentAction = FORWARD_LEFT;
			suggestedAction = BACKWARD_RIGHT;
		} else if (distValue(DIST2) > DIST_TRESHOLD) {
			// jesli przeciwnik jest z przodu po prawej - do przodu na prawo
			currentAction = FORWARD_RIGHT;
			suggestedAction = BACKWARD_LEFT;
		} /*else if (distValue(DIST3) > DIST_TRESHOLD) {
			// jesli przeciwnik jest z tylu - obrot
			currentAction = ROTATE_LEFT;
		}*/
	}
	if(repetition >= repetitionMaximum)
	{
		switch( currentAction )
		{
		case FORWARD:
			//
			break;
		case FORWARD_LEFT:
			suggestedAction = FORWARD_RIGHT;
			break;
		case FORWARD_RIGHT:
			suggestedAction = FORWARD_LEFT;
			break;
		}
	}

	currentAction = suggestedAction;
}
// Funkcja wykonuje akcje
void executeAction() {
	switch( currentAction )
	{
	case STOP:
		servoStop(SERVO1);
		servoStop(SERVO2);
	    break;

	case FORWARD:
		servoBackward(SERVO1);
		servoForward(SERVO2);
	    break;

	case FORWARD_LEFT:
		servoStop(SERVO1);
		servoForward(SERVO2);
		waitMs(5);
		servoBackward(SERVO1);
		servoForward(SERVO2);
	    break;

	case FORWARD_RIGHT:
		servoBackward(SERVO1);
		servoStop(SERVO2);
		waitMs(5);
		servoBackward(SERVO1);
		servoForward(SERVO2);
		break;

	case FORWARD_ATACK:
		servoForward(SERVO2);
		servoBackward(SERVO1);
		break;

	case BACKWARD:
		servoBackward(SERVO2);
		servoForward(SERVO1);
		break;

	case BACKWARD_LEFT:
		servoStop(SERVO1);
		servoBackward(SERVO2);
		waitMs(5);
		servoBackward(SERVO2);
		servoForward(SERVO1);
		break;

	case BACKWARD_RIGHT:
		servoForward(SERVO1);
		servoStop(SERVO2);
		waitMs(5);
		servoBackward(SERVO2);
		servoForward(SERVO1);
		break;

	case BACKWARD_ATACK:
		servoBackward(SERVO2);/*Czy to jest potrzebne?*/
		servoForward(SERVO1);
	    break;

	case ROTATE_LEFT:
		servoBackward(SERVO2);
		servoBackward(SERVO1);
	    break;

	case ROTATE_RIGHT:
	    servoForward(SERVO2);
		servoForward(SERVO1);
	    break;

	default:

	    break;
	}
}

// funkcja wywoluwana co 1 ms, realizuje operacje diagnostyczne
void timer1() {
	// miganie diada co 0,5 s
	ledSet(LED8, (timeInMilis() / 500) % 2);
	// wyswietlenie na diodach stanow czujnikow
	ledSet(LED1, grdDetected(GRD1));
	ledSet(LED2, grdDetected(GRD2));
	ledSet(LED3, grdDetected(GRD3));
	ledSet(LED4, grdDetected(GRD4));
	ledSet(LED5, distValue(DIST1) > DIST_TRESHOLD);
	ledSet(LED6, distValue(DIST2) > DIST_TRESHOLD);
	ledSet(LED7, distValue(DIST3) > DIST_TRESHOLD);
	// mruganie w zaleznsic od ruchu
	if (currentAction == FORWARD || currentAction == FORWARD_ATACK) {
		ledOn(LED9);
		ledOff(LED10);
		ledOn(LED11);
	} else if (currentAction == FORWARD_LEFT || currentAction == BACKWARD_LEFT
			|| currentAction == ROTATE_LEFT) {
		ledOn(LED9);
		ledOff(LED10);
		ledOff(LED11);
	} else if (currentAction == FORWARD_RIGHT || currentAction == BACKWARD_RIGHT
			|| currentAction == ROTATE_RIGHT) {
		ledOff(LED9);
		ledOff(LED10);
		ledOn(LED11);
	} else if (currentAction == BACKWARD || currentAction == BACKWARD_ATACK) {
		ledOff(LED9);
		ledOn(LED10);
		ledOff(LED11);
	}
	// wysylanie pomiarow na uart co 2s
	if ((timeInMilis() % 2000) == 0) {
		// wyswietlanie stanow czujnikow
		rprintf("G1=%d G2=%d G3=%d G4=%d D1=%d D2=%d D3=%d D4=%d ",
				grdDetected(GRD1), grdDetected(GRD2), grdDetected(GRD3),
				grdDetected(GRD4), distValue(DIST1), distValue(DIST2),
				distValue(DIST3), distValue(DIST4));
		// wyswietlanie aktualnej akcji
		if (currentAction == STOP) {
			rprintf("STOP\r\n");
		} else if (currentAction == FORWARD) {
			rprintf("FORWARD\r\n");
		} else if (currentAction == FORWARD_LEFT) {
			rprintf("FORWARD_LEFT\r\n");
		} else if (currentAction == FORWARD_RIGHT) {
			rprintf("FORWARD_RIGHT\r\n");
		} else if (currentAction == FORWARD_ATACK) {
			rprintf("FORWARD_ATACK\r\n");
		} else if (currentAction == BACKWARD) {
			rprintf("BACKWARD\r\n");
		} else if (currentAction == BACKWARD_LEFT) {
			rprintf("BACKWARD_LEFT\r\n");
		} else if (currentAction == BACKWARD_RIGHT) {
			rprintf("BACKWARD_RIGHR\r\n");
		} else if (currentAction == BACKWARD_ATACK) {
			rprintf("BACKWARD_ATACK\r\n");
		} else if (currentAction == ROTATE_LEFT) {
			rprintf("ROTATE_LEFT\r\n");
		} else if (currentAction == ROTATE_RIGHT) {
			rprintf("ROTATE_RIGHT\r\n");
		}
	}
}

// funkcja oczekuje na nacisniecie przycisku i
void countdown() {
	// oczekiwanie na nacisniecie przycisku
	while (!buttonPressed(BUTTON1) && !buttonPressed(BUTTON2));
	// odliczanie
	rprintf("5... \r\n");
	ledOn(LED9);
	ledOff(LED10);
	ledOn(LED11);
	wait(1);
	rprintf("4... \r\n");
	ledOff(LED11);
	wait(1);
	rprintf("3... \r\n");
	ledOff(LED9);
	ledOn(LED10);
	ledOn(LED11);
	wait(1);
	rprintf("2... \r\n");
	ledOff(LED11);
	wait(1);
	rprintf("1... \r\n");
	ledOff(LED10);
	ledOn(LED11);
	wait(1);
	rprintf("START\r\n");
	ledOn(LED9);
	ledOn(LED10);
}
